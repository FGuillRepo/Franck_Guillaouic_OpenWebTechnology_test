// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()

        maven {
            url "https://maven.google.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
ext {
    // Sdk and tools
    // Support library and architecture components support minSdk 14 and above.
    minSdkVersion = 16
    targetSdkVersion = 27
    compileSdkVersion = 27
    buildToolsVersion = '27.0.3'

    // App dependencies
    supportLibraryVersion = "27.1.1"
    guavaVersion = "18.0"
    junitVersion = "4.12"
    mockitoVersion = "1.10.19"
    mockito = "2.19.0"
    powerMockito = "1.6.2"
    hamcrestVersion = "1.3"
    runnerVersion = "1.0.1"
    rulesVersion = "1.0.1"
    espressoVersion = "3.0.1"
    espressoCore = "3.1.0"

    roomVersion = "1.0.0"
    multidex = "1.0.3"
    retrofit = "2.3.0"
    convertergson = "2.3.0"
    adapterrxjava2 = "2.3.0"

    rxandroid = "2.0.1"
    rxjava = "2.0.5"
    rxpermissions = "0.9.4@aar"
    okhttp = "3.10.0"
    gson = "2.7"
    picasso = "2.5.0"
    junit = "4.12"
    mockitocore = "1.10.19"
    androidarc = "1.1.1"
    coretesting = "2.0.0"
    testrunner = "1.1.1"
    hamcrest = "1.3"
}

/*
 * Workaround for https://code.google.com/p/android/issues/detail?id=182715
 *
 * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
 * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
 * instrumentation APK which leads to
 *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * on older devices.
 *
 *
 * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
 * and delete the files right after it creates them.
 */
subprojects {
    tasks.withType(com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask) { task ->
        if (task.name.endsWith("AndroidTest")) {
            task.finalizedBy(tasks.create("${task.name}Workaround") << {
                task.output.deleteDir()
            })
        }
    }
}